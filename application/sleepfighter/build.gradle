apply plugin: 'android'
apply plugin: 'idea'

// Config:
def getVersionCode() { 8 }
def getMinSdk() { 9 }
def getTargetSdk() { 19 }

// Generate BuildTimestamp.java.
apply from: 'timestamp.gradle'

// Add all dependencies.
apply from: 'dependencies.gradle'

// Apply signing configuration.
apply from: 'signing.gradle'

android {
	buildToolsVersion "19.0.1"

	// Override manifest stuff.
    compileSdkVersion getTargetSdk()
    defaultConfig {
        minSdkVersion getMinSdk()
        targetSdkVersion getTargetSdk()
	    versionCode getVersionCode()
    }

	// Using Java 7, but no try-with-resources.
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	// Proguard settings:
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

	// Introduce "releaseDebug" extending release but debuggable.
	buildTypes {
		debugRelease.initWith( buildTypes.release )
		debugRelease {
			debuggable      true
			signingConfig  signingConfigs.debug
		}
	}
	sourceSets.debugRelease.setRoot( 'src/release' )

	// Suffix all build types with type except for release, allowing parallel installs.
	buildTypes.each{ type ->
		type.packageNameSuffix = type.name == 'release' ? '' : ".$type.name"
	}
}

// Fix: multiple jars have this file.
android.packagingOptions {
	exclude 'META-INF/LICENSE.txt'
	exclude 'META-INF/NOTICE.txt'
	exclude 'META-INF/services/javax.annotation.processing.Processor'
}

android.applicationVariants.all{ v ->
	def base = "${buildDir}/classes/${v.name}"

	/*
	def t = "${v.name}CopyFiles"
	task "$t" (type: Copy) {
		from "${base}/META-INF/"
		into "${buildDir}/assets/${v.name}/META-INF/"
	}
	v.mergeAssets.mustRunAfter "$t"
	v.mergeAssets.dependsOn "$t"
	*/

	def j = "${v.name}MetaINFServicesJar"
	task "$j" (type: Jar) {
		from "${base}/META-INF/"
		into "/META-INF/"
		archiveName "${v.name}/metainfservices.jar"
	}

	def d = "${v.name}MetaINFServicesJarDependencies"
	task "$d" (dependsOn: "$j") {
		project.dependencies.add( 'compile', "${buildDir}/libs/${v.name}/metainfservices.jar" )
	}

	v.javaCompile.dependsOn "$d"

	//v.javaCompile.dependsOn "$t"
	/*
	gaeRun {
		gradle.taskGraph.whenReady { taskGraph ->
			if (taskGraph.hasTask(":gaeRun")) {
				project.dependencies.add("compile", "org.slf4j:slf4j-log4j12:${slf4jVersion}") // log4j binding
				project.dependencies.add("compile", "org.slf4j:jul-to-slf4j:${slf4jVersion}") //java.util.logging bridge
			}
		}
	}
	*/
}