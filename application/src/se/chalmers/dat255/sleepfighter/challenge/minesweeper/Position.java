package se.chalmers.dat255.sleepfighter.challenge.minesweeper;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Constructor;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : line 75</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("se.chalmers.dat255.sleepfighter.challenge.minesweeper") 
public class Position extends CPPObject {
	/**
	 * enum values<br>
	 * <i>native declaration : line 80</i>
	 */
	public enum direction implements IntValuedEnum<direction > {
		NORTHWEST(0),
		NORTH(1),
		NORTHEAST(2),
		EAST(3),
		SOUTHEAST(4),
		SOUTH(5),
		SOUTHWEST(6),
		WEST(7);
		direction(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<direction > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<direction > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** Original signature : <code>Position(value_type, value_type)</code> */
	@Name("Position") 
	@Constructor(0) 
	public position(int _x, int _y) {
		super((Void)null, 0, _x, _y);
	}
	/**
	 * Original signature : <code>value_type getX()</code><br>
	 * <i>native declaration : line 99</i>
	 */
	native public int getX();
	/**
	 * Original signature : <code>value_type getY()</code><br>
	 * <i>native declaration : line 103</i>
	 */
	native public int getY();
	/**
	 * Original signature : <code>bool isAdjacent(Position)</code><br>
	 * <i>native declaration : line 107</i>
	 */
	native public boolean isAdjacent(Position other);
	/**
	 * Original signature : <code>class_type translated(const value_type, const value_type)</code><br>
	 * <i>native declaration : line 111</i>
	 */
	native public Position translated(int dx, int dy);
	/**
	 * Original signature : <code>class_type translated(direction)</code><br>
	 * <i>native declaration : line 115</i>
	 */
	public Position translated(IntValuedEnum<Position.direction > dir) {
		return translated((int)dir.value());
	}
	protected native Position translated(int dir);
	/** C type : value_type */
	@Field(1) 
	public int x() {
		return this.io.getIntField(this, 1);
	}
	/** C type : value_type */
	@Field(1) 
	public Position x(int x) {
		this.io.setIntField(this, 1, x);
		return this;
	}
	/** C type : value_type */
	@Field(2) 
	public int y() {
		return this.io.getIntField(this, 2);
	}
	/** C type : value_type */
	@Field(2) 
	public Position y(int y) {
		this.io.setIntField(this, 2, y);
		return this;
	}
	public Position() {
		super();
	}
	public Position(Pointer pointer) {
		super(pointer);
	}
}
