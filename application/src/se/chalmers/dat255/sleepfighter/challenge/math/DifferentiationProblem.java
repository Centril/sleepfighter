package se.chalmers.dat255.sleepfighter.challenge.math;

import java.util.Random;

import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

import se.chalmers.dat255.sleepfighter.utils.debug.Debug;
import se.chalmers.dat255.sleepfighter.utils.math.RandomMath;

/*
 * Challenge: compute the value of a derivative. 
 */
public class DifferentiationProblem implements MathProblem {
	
	// See the documentation of DerivativeStructure for details. 
	private static final int PARAMETERS = 1;
	private static final int INDEX = 0;
	
	// so we only ask for second derivatives. 
	private static final int ORDER = 1;
	
	// Used for storing a function and its string representatin. Utilized in DiffentiationProblem
	public class Function {
		
		public Function() {
			s = "";
			f = getZero();
		}
		
		public void add(DerivativeStructure term, String termStr) {
			this.f = this.f.add(term);
			
			String sign;
			if(s != "") {
				// If we don't do this, minus signs will look like this:
				// " x + -x". Instead it should obviously be "x - x"
				sign  = (termStr.charAt(0) == '-' ? " " : " + ");		
			} else {
				sign = "";
			}
			this.s = this.s + sign + termStr;
		}

		public void add(Function func) {
			this.add(func.f, func.s);
		}

		
		public DerivativeStructure f;
		
		// the string represenation of f.
		public String s;
	}
	
	private int solution;
	
	String renderedString;
	
	// the value for which to calculate to derivative for. So the solution becomes f'(x)
	private int x;
	
	private Random rng = new Random();
	

	
	public String render() {
		return this.renderedString;
	}
	
	public int solution() {
		Debug.d("solution is " + solution);
		return this.solution;
	}
	
	public void newProblem() {
		
		this.x = 1; //RandomMath.nextRandomRanged(rng, -10, 10);
		Function f = randomPolynomial();
		this.solution = (int)f.f.getPartialDerivative(1);
		this.renderedString = "$f(x) = " + f.s + "$";
		this.renderedString += "<br>Find $f'(" + this.x + ")$";
		Debug.d("solution is " + solution);
	}
	
	// The identity function f(x) = x
	private DerivativeStructure getIdentity() {
		return new DerivativeStructure(PARAMETERS, ORDER, INDEX, this.x);
	}
	
	// A DerivativeStructure with value 0
	private static DerivativeStructure getZero() {
		return new DerivativeStructure(PARAMETERS, ORDER, 0);
	}
	
	
	
	
	// form a random single function like |x|, or sqrt(3x) or 3x^2
	// basically, a function with a single term, so it is not a polynomial.  So functions with multiple
	// terms like |x| + 2x^2 will not be generated by this function. 
	private Function randomFunction() {
		
		Function f = new Function();
		
		if(rng.nextInt(2) == 1) {
			// generate an expression on the form ax^c
			int c = RandomMath.nextRandomRanged(rng, 1, 5);
			int a =  RandomMath.nextRandomRanged(rng, -5, 5, 0);	
			
			// if a is 1 we don't need a string at all. Because the expression x looks better than 1x.
			String aStr = (a != 1 ? a + "" : "");
			
			// Because x looks better than x^1
			String xcStr = (c == 1 ? "x" : "x^" + c);
			
			// form the term
			f.f = getIdentity().pow(c).multiply(a);
			f.s = aStr + xcStr ;
			
		} else {
			f.f = getIdentity();
			f.s = "x";
		}
		
		
		return f;
	}
	
	private Function randomPolynomial() {
		Function ret = new Function();

		final int numberTerms = RandomMath.nextRandomRanged(rng, 2, 5);
		
		for(int term = 0; term < numberTerms; ++term) {
			
			Function f = randomFunction();
			
			ret.add(f);
		}
		
		return ret;
	}
	
	
	public DifferentiationProblem() {
		
	}
	
}
