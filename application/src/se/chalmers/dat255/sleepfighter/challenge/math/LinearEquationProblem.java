/*******************************************************************************
 * Copyright (c) 2013 See AUTHORS file.
 * 
 * This file is part of SleepFighter.
 * 
 * SleepFighter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SleepFighter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SleepFighter. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package se.chalmers.dat255.sleepfighter.challenge.math;

import java.util.Random;

import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.LUDecomposition;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;

import com.google.common.math.DoubleMath;

import android.content.Context;

import se.chalmers.dat255.sleepfighter.R;
import se.chalmers.dat255.sleepfighter.utils.debug.Debug;
import se.chalmers.dat255.sleepfighter.utils.math.MatrixUtil;
import se.chalmers.dat255.sleepfighter.utils.math.RandomMath;

/*
 * Challenge: Solve a system of linear equations with three variables.
 * For the system of linear equations Ax = b, where x = (x1 x2 x3), the user is to solve
 * for either x1 or x2(just solving for x3 is too easy). 
 * The systems of linear equations generated by this class, have an unique solution, 
 * and are thus trivially solved using Gaussian elimination. 
 */
public class LinearEquationProblem implements MathProblem {
	
	private final Context context;
	
	private static final int MAX_INT = 15;
	private static final int MIN_INT_COEFFICENTS = -8;
	
	// we use a 3x3 coefficent matrix.
	private static final int MATRIX_SIZE = 3;
	
	private int solution;
	
	private String renderedString;
	
	private Random rng = new Random();
	
	// The coefficient-matrix. 
	private RealMatrix A;
	
	// The constant vector b.
	private RealVector b;
	
	private int variableToSolveFor;
	
	public String render() {
		return this.renderedString;
	}
	
	public int solution() {
		return this.solution;
	}
	
	// Create A
	RealMatrix createCoefficients() {
		return MatrixUtil.createRandomMatrix(rng, MATRIX_SIZE, -8, 16, true);
	}
	
	// create b
	RealVector createConstantVector() {
		// 20, 60
		return MatrixUtil.createRandomVector(rng, MATRIX_SIZE, 25, 60, true);
	}
	
	public void newProblem() {
		
		for(int i = 0; i < 20; ++i) {
			generateProblem();
			Debug.d("coeff: " + this.A);
			Debug.d("constants: " + this.b);
			Debug.d("variable: " + this.variableToSolveFor);
			Debug.d("solution: " + this.solution);
		}
		
		doRender(null, null);
	}
	
	// find a system of linear equations with a real solution(because real solutions are easy to input on the android keyboard)
	private void generateProblem() {
		
		// We want to generate a system of linear equations Ax = b(where x = (x1 x2 x3)).
		// We'll cache the LU-decomposition of the coefficient-matrix A, and then keep on 
		// generating a constant vector b until we got a real solution for either x1 or y2.
		this.A = createCoefficients();
		DecompositionSolver ALU = new LUDecomposition(createCoefficients()).getSolver();
		
		int attempts = 0;
		
		boolean foundb = false;
		do { 
			
			// if after 40 attempts we still can't find a good constants vector, we should give up on this 
			// coefficient matrix and try creating a new one.
			if(attempts == 40) {
				this.A = createCoefficients();
				ALU = new LUDecomposition(createCoefficients()).getSolver();
				attempts = 0;
			}
		
			this.b = this.createConstantVector();
			RealVector solution = MatrixUtil.solveLinearEquationSystem(ALU, b);
			
			this.variableToSolveFor = -1;
			
			if(isInteger(solution.getEntry(0)) && !isBoringSolution((int)solution.getEntry(0))) {
				this.variableToSolveFor = 0;
				
			} else if(isInteger(solution.getEntry(1)) && !isBoringSolution((int)solution.getEntry(1))) {
				this.variableToSolveFor = 1;
			}

			if(this.variableToSolveFor != -1) {
				foundb = true;
				this.solution = (int)solution.getEntry(this.variableToSolveFor);
			}
			
			attempts++;
			
		} while(!foundb);
	}
	
	// boring solutions are solution that are small, boring numbers like 1 and 2. 
	// We will not allow boring solutions!
	private static boolean isBoringSolution(int solution) {
		return solution == 0 || Math.abs(solution) == 1 || Math.abs(solution) == 2;
	}
	
	private static boolean isInteger(double d) {
		return DoubleMath.isMathematicalInteger(d);
	}
	
	private void doRender(RealMatrix coefficientMatrix, RealVector constantVector) {
		
		this.renderedString =  "\\[\\table 2x + 3y + 4z, =, 4; 4x + 2y + 6z , =, 6\\]";
		
		
	/*	this.renderedString = "$A =";
		this.renderedString += renderMatrix(m1);
		this.renderedString += renderMatrix(m2);
		this.renderedString += "$";
		String format = context.getResources().getString(R.string.matrix_challenge_desc);
		this.renderedString += "<br>" + String.format(format, "$A$");*/
	}
	
	public LinearEquationProblem(final Context context) {
		this.context = context;
	}
	
}
